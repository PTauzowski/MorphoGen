classdef IntegrationRectangular < Integration
        
    methods
        function obj = IntegrationRectangular(g,d)
            obj.dg = g;
            obj.dim = d;
            
            switch g
                case 0
                    points1D  = 0.0;
                    weights1D = 2.0;
                    
                case 1
                    points1D = [ -0.577350269189626 0.577350269189626 ];
                    weights1D = [1 1];
                     
                case 2    
                    points1D = [ -0.774596669241483 0 0.774596669241483 ] ;
                    weights1D = [5/9 8/9 5/9 ];
                    
                case 3
                    points1D = [ -0.861136311594053 -0.339981043584856 0.339981043584856 0.861136311594053];
                    weights1D =[ 0.347854845137454 0.652145154862546 0.652145154862546 0.347854845137454 ];
                    
                case 4
                    points1D = [-0.906179845938664 -0.538469310105683 0.0 0.538469310105683 0.906179845938664 ];
                    weights1D = [ 0.236926885056189 0.478628670499366 0.568888888888889 0.478628670499366 0.236926885056189 ];
                    
                case 5
                    points1D = [-0.932469514203152 -0.661209386466265 -0.238619186083197 0.238619186083197 0.661209386466265 0.932469514203152];
                    weights1D = [ 0.171324492379170 0.360761573048139 0.467913934572691 0.467913934572691 0.360761573048139 0.171324492379170 ];
                    
                case 6
                    points1D = [-0.949107912342759 -0.741531185599394 -0.405845151377397 0 0.405845151377397 0.741531185599394 0.949107912342759];
                    weights1D = [ 0.129484966168870 0.279705391489277 0.381830050505119 0.417959183673469 0.381830050505119 0.279705391489277 0.129484966168870 ];
                    
                case 7
                    points1D = [-0.960289856497536 -0.796666477413627 -0.525332409916329 -0.183434642495650 0.183434642495650 0.525332409916329 0.796666477413627 0.960289856497536];
                    weights1D = [0.101228536290376 0.222381034453374 0.313706645877887 0.362683783378362 0.362683783378362 0.313706645877887 0.222381034453374 0.101228536290376];
                    
                case 8
                    points1D = [-0.968160239507626 -0.836031107326636 -0.613371432700590 -0.324253423403809 0 0.324253423403809 0.613371432700590 0.836031107326636 0.968160239507626];
                    weights1D = [0.081274388361574 0.180648160694857 0.260610699402935 0.312347077040003 0.330239355001260 0.312347077040003 0.260610699402935 0.180648160694857 0.081274388361574];
                    
                case 9
                    points1D = [-0.973906528517172 -0.865063366688985 -0.679409568299024 -0.433395394129247 -0.148874338981631 0.148874338981631 0.433395394129247 0.679409568299024 0.865063366688985 0.973906528517172];
                    weights1D = [0.066671344308688 0.149451349150581 0.219086362515982 0.269266719309996 0.295524224714753 0.295524224714753 0.269266719309996 0.219086362515982 0.149451349150581 0.066671344308688];
                    
                case 10
                    points1D = [-0.978228658146057 -0.887062599768095 -0.730152005574049 -0.519096129206812 -0.269543155952345 0 0.269543155952345 0.519096129206812 0.730152005574049 0.887062599768095 0.978228658146057];
                    weights1D = [0.055668567116174 0.125580369464905 0.186290210927734 0.233193764591990 0.262804544510247 0.272925086777901 0.262804544510247 0.233193764591990 0.186290210927734 0.125580369464905 0.055668567116174];
                    
                case 11
                    points1D =  [-0.981560634246719 -0.904117256370475 -0.769902674194305 -0.587317954286617 -0.367831498998180 -0.125233408511469  0.125233408511469 0.367831498998180 0.587317954286617 0.769902674194305 0.904117256370475 0.981560634246719];
                    weights1D = [0.047175336386512 0.106939325995318 0.160078328543346 0.203167426723066 0.233492536538355 0.249147045813403 0.249147045813403 0.233492536538355 0.203167426723066 0.160078328543346 0.106939325995318 0.047175336386512];
                otherwise
                    warning('Unsupported rectangular quadrature dimension: ' + num2str( g ) );
            end
            
            switch d
                case 1
                    obj.points = points1D';
                    obj.weights = weights1D;
                    
                case 2
                    [iy,ix] = meshgrid(1:g+1,1:g+1);
                    obj.points = [ points1D(ix(:)); points1D(iy(:)) ]';
                    obj.weights = weights1D(ix(:)).*weights1D(iy(:));
                    
                case 3
                    [ix,iy,iz] = meshgrid(1:g+1,1:g+1,1:g+1);
                    obj.points = [ points1D(ix(:)); points1D(iy(:)); points1D(iz(:)) ]';
                    obj.weights = weights1D( ix(:) ) .* weights1D( iy(:) ) .* weights1D( iz(:) );
                otherwise
                    warning('Unsupported space dimension: ' + num2str( d ) );
            end
        end
        function vol = integrateVectorFunction( obj, fn ) 
            [dets,~,~] = fn.Jdet( obj.points );
            vol = sum( dets(:) .* obj.weights(:) .* fn.computeValue( obj.points ), 2 );
        end
        function vol = integrateMatrixFunction( obj, fn ) 
            [dets,~,~] = fn.Jdet( obj.points );
            vol = sum( dets(:) .* obj.weights(:) .* fn.computeValue( obj.points ), 3 );
        end
        function vol = integrateScalarFunction( obj, fn ) 
            dets = fn.Jdet( obj.points );
            vol = sum( dets(:) .* obj.weights(:) .* fn.computeValue( obj.points ) );
        end
    end
end

